xlab="Yellow Dummy", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(dummy1),col="dark blue",lty="dotted")
plot(x=dummy2, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Green Dummy",
xlab="Green  Dummy", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(dummy2),col="dark blue",lty="dotted")
plot(x=quality, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Quality Index",
xlab="Quality Index", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(quality),col="dark blue",lty="dotted")
library(knitr)
corrout = cor(cbind(logQ,logPr, dummy1, dummy2,quality))
kable(round(corrout,digits=4))
regout_full = lm(logQ ~ logPr+dummy1+dummy2+quality)
vif(regout_full)
print(summary(regout_full))
knitr::opts_chunk$set(message = F, warning =  F)
set.seed(20)
n = 5000  # number of observation
trueB = c(3,-3, 1.5, 0.7, 3)
err = rnorm(n,sd=3)  # error term simulation
u1 = runif(n)
u2 = runif(n)
u3 = runif(n)
u4 = runif(n)
logPr = u1 +  u2
quality = u3 + u2
dummy1 = (u4> 0.7)*1.0
dummy2 = ((u4<0.7)&(u4>0.3))*1.0
logQ= trueB[1] + trueB[2]*logPr + trueB[3]*dummy1 + trueB[4]*dummy2 + trueB[5]*quality + err
summary(cbind(logQ,logPr, dummy1, dummy2,quality))
var(logPr)
par(mfrow = c(2,2))
plot(x=logPr, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. log(Price)",
xlab="log(Price)", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(logPr),col="dark blue",lty="dotted")
plot(x=dummy1, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Yellow Dummy",
xlab="Yellow Dummy", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(dummy1),col="dark blue",lty="dotted")
plot(x=dummy2, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Green Dummy",
xlab="Green  Dummy", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(dummy2),col="dark blue",lty="dotted")
plot(x=quality, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Quality Index",
xlab="Quality Index", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(quality),col="dark blue",lty="dotted")
regout_full = lm(logQ ~ logPr+dummy1+dummy2+quality)
print(summary(regout_full))
plot(x=quality, y=logPr, col="blue", main="Correlation: \n log(Sales) vs. Quality Index",
xlab="Quality Index", ylab = "log(Sales)", pch=16)
coef(regout_full)
coef(regout_short)
plot(x=quality, y=logPr, col="blue", main="Correlation: \n log(Sales) vs. Quality Index",
xlab="Quality Index", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(quality),col="dark blue",lty="dotted")
cor(logPr,quality)
knitr::opts_chunk$set(message = F, warning =  F)
set.seed(20)
n = 5000  # number of observation
trueB = c(3,-3, 1.5, 0.7, 3)
err = rnorm(n,sd=3)  # error term simulation
u1 = runif(n)
u2 = runif(n)
u3 = runif(n)
u4 = runif(n)
logPr = u1 +  u2
quality = u3 + u2
dummy1 = (u4> 0.7)*1.0
dummy2 = ((u4<0.7)&(u4>0.3))*1.0
logQ= trueB[1] + trueB[2]*logPr + trueB[3]*dummy1 + trueB[4]*dummy2 + trueB[5]*quality + err
summary(cbind(logQ,logPr, dummy1, dummy2,quality))
par(mfrow = c(2,2))
plot(x=logPr, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. log(Price)",
xlab="log(Price)", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(logPr),col="dark blue",lty="dotted")
plot(x=dummy1, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Yellow Dummy",
xlab="Yellow Dummy", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(dummy1),col="dark blue",lty="dotted")
plot(x=dummy2, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Green Dummy",
xlab="Green  Dummy", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(dummy2),col="dark blue",lty="dotted")
plot(x=quality, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Quality Index",
xlab="Quality Index", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(quality),col="dark blue",lty="dotted")
library(knitr)
corrout = cor(cbind(logQ,logPr, dummy1, dummy2,quality))
kable(round(corrout,digits=4))
E[\hat\delta] = \beta_1 + (X_1'X)^{-1}X_1'X_2\beta_2
knitr::opts_chunk$set(message = F, warning =  F)
set.seed(20)
n = 5000  # number of observation
trueB = c(3,-3, 1.5, 0.7, 3)
err = rnorm(n,sd=3)  # error term simulation
u1 = runif(n)
u2 = runif(n)
u3 = runif(n)
u4 = runif(n)
logPr = u1 +  u2
quality = u3 + u2
dummy1 = (u4> 0.7)*1.0
dummy2 = ((u4<0.7)&(u4>0.3))*1.0
logQ= trueB[1] + trueB[2]*logPr + trueB[3]*dummy1 + trueB[4]*dummy2 + trueB[5]*quality + err
summary(cbind(logQ,logPr, dummy1, dummy2,quality))
par(mfrow = c(2,2))
plot(x=logPr, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. log(Price)",
xlab="log(Price)", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(logPr),col="dark blue",lty="dotted")
plot(x=dummy1, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Yellow Dummy",
xlab="Yellow Dummy", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(dummy1),col="dark blue",lty="dotted")
plot(x=dummy2, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Green Dummy",
xlab="Green  Dummy", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(dummy2),col="dark blue",lty="dotted")
plot(x=quality, y=logQ, col="blue", main="Correlation: \n log(Sales) vs. Quality Index",
xlab="Quality Index", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(quality),col="dark blue",lty="dotted")
library(knitr)
corrout = cor(cbind(logQ,logPr, dummy1, dummy2,quality))
kable(round(corrout,digits=4))
regout_full = lm(logQ ~ logPr+dummy1+dummy2+quality)
print(summary(regout_full))
regout_short = lm(logQ ~ logPr+dummy1+dummy2)
print(summary(regout_short))
coef(regout_full)
coef(regout_short)
plot(x=quality, y=logPr, col="blue", main="Correlation: \n log(Sales) vs. Quality Index",
xlab="Quality Index", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(quality),col="dark blue",lty="dotted")
cor(logPr,quality)
cor(quality,regout_short$residuals)
cor(quality,regout_full$residuals)
cor(quality,regout_short$residuals)
cor(quality,regout_full$residuals)
cor(logPr,regout_short$residuals)
cor(logPr,regout_full$residuals)
cor(logPr,regout_short$residuals)
cor(logPr,regout_full$residuals)
cor(logPr,regout_short$residuals)
cor(logPr,regout_full$residuals)
cor(logPr,regout_full$residuals)
cor(logPr,regout_short$residuals)
cor(logPr,regout_full$residuals)
cor(logPr,regout_short$residuals)
cor(logPr,regout_full$residuals)
egout_short$residuals
regout_short$residuals
coef(regout_full)
coef(regout_short)
plot(x=quality, y=logPr, col="blue", main="Correlation: \n log(Sales) vs. Quality Index",
xlab="Quality Index", ylab = "log(Sales)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(quality),col="dark blue",lty="dotted")
cor(logPr,quality)
coef(regout_full)
coef(regout_short)
plot(x=quality, y=logPr, col="blue", main="Correlation: \n log(Price) vs. Quality Index",
xlab="Quality Index", ylab = "log(Price)", pch=16)
abline(h=mean(logQ),col="dark blue",lty="dotted")
abline(v=mean(quality),col="dark blue",lty="dotted")
cor(logPr,quality)
vif(regout_full)
library(car)
vif(regout_full)
set.seed(20)
n = 5000  # number of observation
trueB = c(3,-3, 1.5, 0.7, 3)
err = rnorm(n,sd=3)  # error term simulation
u1 = runif(n)
u2 = runif(n)
u3 = runif(n)
u4 = runif(n)
logPr = u1 +  u2
quality = u3
dummy1 = (u4> 0.7)*1.0
dummy2 = ((u4<0.7)&(u4>0.3))*1.0
logQ= trueB[1] + trueB[2]*logPr + trueB[3]*dummy1 + trueB[4]*dummy2 + trueB[5]*quality + err
summary(cbind(logQ,logPr, dummy1, dummy2,quality))
regout_full = lm(logQ ~ logPr+dummy1+dummy2+quality)
print(summary(regout_full))
regout_short = lm(logQ ~ logPr+dummy1+dummy2)
print(summary(regout_short))
library(knitr)
corrout = cor(cbind(logQ,logPr, dummy1, dummy2,quality))
kable(round(corrout,digits=4))
regout_short = lm(logQ ~ logPr+dummy1+dummy2)
print(summary(regout_short))
exp(1.56)
exp(1.56)
exp(0.72)
exp(1.56)-1
exp(0.72)-1
library(knitr)
corrout = cor(cbind(logQ,logPr, dummy1, dummy2,quality))
print(kable(round(corrout,digits=4)))
tri = sum(4,3,1,4,4,4,3,4,1,1,3,3,2,2,4)
reg = sum(2,4,2,3,3,2,4,2,4,4,4,2,4,4,2)
star = sum(1,1,3,2,1,1,2,3,2,3,2,1,1,2,1)
cir = sum(3,2,4,1,2,3,1,1,3,2,1,4,3,3,3)
tri = sum(4,3,1,4,4,4,3,4,1,1,3,3,2,2,4)
reg = sum(2,4,2,3,3,2,4,2,4,4,4,2,4,4,2)
star = sum(1,1,3,2,1,1,2,3,2,3,2,1,1,2,1)
cir = sum(3,2,4,1,2,3,1,1,3,2,1,4,3,3,3)
tri = sum(4,3,1,4,4,4,3,4,1,1,3,3,2,2,4)
reg = sum(2,4,2,3,3,3,4,2,4,4,4,2,4,4,2)
sta = sum(1,1,3,2,1,1,2,3,2,3,2,1,1,2,1)
cir = sum(3,2,4,1,2,2,1,1,3,2,1,4,3,3,3)
tri = sum(4,3,1,4,4,4,3,4,1,1,3,3,2,2,4)
reg = sum(2,4,2,3,3,3,4,2,4,4,4,2,4,4,2)
sta = sum(1,1,3,2,1,1,2,3,2,3,2,1,1,2,1)
cir = sum(3,2,4,1,2,2,1,1,3,2,1,4,3,3,3)
tri = sum(4,3,1,4,4,4,3,4,1,1,3,3,2,1,4)
reg = sum(2,4,2,3,3,3,4,2,4,4,4,2,4,4,2)
sta = sum(1,1,3,2,1,1,2,3,2,3,2,1,1,2,1)
cir = sum(3,2,4,1,2,2,1,1,3,2,1,4,3,3,3)
setwd("C:/Users/renz/Documents/GitHub/KB-CapStone/data/서울시 우리마을 가게")
# 소득소비
## 상권
in_cnsmp<- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권-소득소비).csv", sep= "\t")
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$기준_년월_코드 >= 201701)
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$기준_년월_코드 >= 201701)
library(dplyr)
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$기준_년월_코드 >= 201701)
in_cnsmptemp <- in_cnsmp %>% filter(in_cnsmp$상권_코드 <= 1744)
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$상권_코드 <= 1744)
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$상권_코드 <= 1744)
## 배후지
out_cnsmp <- read.table("소득소비/서울시 우리마을가게 상권분석서비스(상권배후지-소득소비).csv")
## 배후지
out_cnsmp <- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권배후지-소득소비).csv")
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$기준년월코드>= 201701)
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$상권_코드 <= 1744)
## 배후지
out_cnsmp <- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권배후지-소득소비).csv")
## 배후지
out_cnsmp <- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권배후지-소득소비).csv")
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$기준년월코드>= 201701)
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$상권_코드 <= 1744)
## 배후지
out_cnsmp <- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권배후지-소득소비).csv")
## 배후지
out_cnsmp <- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권배후지-소득소비).csv",sep= "\t")
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$기준년월코드>= 201701)
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$상권_코드 <= 1744)
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$상권_코드 <= 1744)
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$상권코드 <= 1744)
### 정보 확인
length(unique(in_cnsmp$상권_코드))
length(unique(out_cnsmp$상권코드))
# 소득소비
## 상권
in_cnsmp<- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권-소득소비).csv", sep= "\t")
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$기준_년월_코드 >= 201701)
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$상권_코드 <= 1744)
### 정보 확인
length(unique(in_cnsmp$상권_코드))
length(unique(out_cnsmp$상권코드))
# 소득소비
## 상권
in_cnsmp<- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권-소득소비).csv", sep= "\t")
View(in_cnsmp)
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$기준_년월_코드 >= 201701)
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$상권_코드 <= 2000)
### 정보 확인
length(unique(in_cnsmp$상권_코드))
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$상권_코드 <= 1744)
## 배후지
out_cnsmp <- read.csv("소득소비/서울시 우리마을가게 상권분석서비스(상권배후지-소득소비).csv",sep= "\t")
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$기준년월코드>= 201701)
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$상권코드 <= 1744)
length(unique(out_cnsmp$상권코드))
length(unique(out_cnsmp$상권코드))
### 정보 확인
length(unique(in_cnsmp$상권_코드))
length(unique(out_cnsmp$상권코드))
# 아파트
in_apt<- read.csv("아파트/서울시 우리마을가게 상권분석서비스(상권-아파트).csv")
in_apt <- in_apt %>% filter(in_apt$기준_년월_코드 >= 201701)
in_apt <- in_apt %>% filter(in_apt$상권코드 <= 1744)
in_apt <- in_apt %>% filter(in_apt$상권_코드 <= 1744)
out_apt <- read.csv("아파트/서울시 우리마을가게 상권분석서비스(상권배후지-아파트).csv")
out_apt <- out_apt %>% filter(out_apt$기준년월.코드 >= 201506)
out_apt <- out_apt %>% filter(out_apt$기준년월.코드 >= 201701)
out_apt <- out_apt %>% filter(out_apt$상권.코드 <= 1744)
length(unique(in_apt$상권_코드))
length(unique(out_apt$상권코드))
length(unique(out_apt$상권코드))
length(unique(out_apt$상권.코드))
length(unique(in_apt$상권_코드))
length(unique(out_apt$상권.코드))
### 정보 확인
length(unique(in_cnsmp$상권_코드))
View(in_cnsmp)
View(in_apt)
in_index<- read.csv("서울시 우리마을가게 상권분석서비스(상권-지수지표).csv")
in_index<- read.csv("서울시 우리마을가게 상권분석서비스(상권-지수지표).csv")
in_index <- in_index %>% filter(in_index$기준_년월_코드>= 201701)
in_index <- in_index %>% filter(in_index$상권_코드 <= 1744)
in_index <- in_index %>% filter(in_index$기준_년월_코드>= 201701)
in_index <- in_index %>% filter(in_index$상권_코드 <= 1744)
View(in_index)
length(unique(in_index$상권_코드))
length(unique(in_index$상권.코드))
setwd("C:/Users/renz/Documents/GitHub/KB-CapStone/data/서울시 우리마을 가게")
library(dplyr)
# 소득소비 2017 ~ 2018.05
## 상권
in_cnsmp <- read.csv("서울시 우리마을가게 상권분석서비스(상권-소득소비).csv", sep= "\t")
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$기준_년월_코드 >= 201701)
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$상권_코드 <= 1744)
## 배후지
out_cnsmp <- read.csv("서울시 우리마을가게 상권분석서비스(상권배후지-소득소비).csv",sep= "\t")
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$기준년월코드>= 201701)
out_cnsmp <- out_cnsmp %>% filter(out_cnsmp$상권코드 <= 1744)
### 상권 수 확인
length(unique(in_cnsmp$상권_코드))
length(unique(out_cnsmp$상권코드))
### 상권 수 확인
length(unique(in_apt$상권_코드))
length(unique(out_apt$상권.코드))
length(unique(in_index$상권_코드))
length(unique(in_index$상권_코드))
View(in_index)
index = [1:1744]
index = (1:1744)
in_index$상권_코드
index = (1:1744)
unique(in_index$상권_코드)
index == unique(in_index$상권_코드)
unique(in_index$상권_코드)
index = (1744:1)
index == unique(in_index$상권_코드)
index != unique(in_index$상권_코드)
in_index$상권_코드[index]
in_index$상권_코드[index]
in_index$상권_코드[index,]
index = []*1774
index = []*1774
index = [0]*1774
index = rep(0,1774)
index = rep(0,1744)
for i in unique(in_index$상권_코드) {
index[i] = unique(in_index$상권_코드)[i]
}
for i in (unique(in_index$상권_코드)) {
index[i] = unique(in_index$상권_코드)[i]
}
unique = unique(in_index$상권_코드)
index = rep(0,1744)
unique[1]
unique[1]
for i in unique {
index[i] = unique[i]
}
for i in (unique){
index[i] = unique[i]
}
for (i in unique) {
index[i] = unique[i]
}
unique[1]
reverse(unique[1])
order(unique)
for (i in unique) {
index[1745-i] = unique[i]
}
index = rep(0,1744)
for (i in unique) {
index[1745-i] = unique[i]
}
for (i in unique) {
index[i] = unique[i]
}
for (i in index) {
index[i] = unique[i]
}
for (i in index) {
index[i] = unique[i]
}
for (i in index) {
index[1745 - i] = unique[i]
}
unique
for (i in index) {
i %in% unique
}
for (i in index) {
index[i] = i %in% unique
}
which(index == 0)
sum(index)
print(index)
1 %in% unique
for (i in index) {
index[i] = i %in% unique
}
787 %in% unique
768 %in% unique
769 %in% unique
768 %in% unique
index  %in% unique
unique%in% index
unique %in% index
unique[1] %in% index
index = rep(0,1744)
unique[1] %in% index
index = c(1:1744)
unique[1] %in% index
nnfor (i in index) {
unique[1] %in% index
}
for (i in index) {
unique[1] %in% index
}
find = rep(0,1744)
for (i in index) {
find[i] = unique[1] %in% index
}
which(find == 0)
sum(find)
for (i in index) {
find[i] = unique[i] %in% index
}
sum(find)
which(find == 0)
print(find)
for (i in index) {
find[i] = index[i] %in% unique
}
which(find == 0)
length(unique(in_index$상권_코드))
## 결측 상권코드.
unique = unique(in_index$상권_코드)
index = c(1:1744)
find = rep(0,1744)
for (i in index) {
find[i] = index[i] %in% unique
}
which(find == 0)
### 상권 수 확인
length(unique(in_apt$상권_코드))
length(unique(out_apt$상권.코드))
## 결측 상권코드.
unique = unique(out_apt$상권.코드)
index = c(1:1744)
find = rep(0,1744)
for (i in index) {
find[i] = index[i] %in% unique
}
which(find == 0)
length(unique(out_cnsmp$상권코드))
table(in_index$서비스_업종_코드_명)
table(in_index$서비스_업종_코드_명)
View(in_index)
read.csv
in_index <- read.csv("서울시 우리마을가게 상권분석서비스(상권-지수지표).csv")
View(in_index)
View(in_index)
### 소득소비 2017 ~ 2018.05
#### 상권
in_cnsmp <- read.csv("서울시 우리마을가게 상권분석서비스(상권-소득소비).csv", sep= "\t")
### 소득소비 2017 ~ 2018.05
#### 상권
in_cnsmp <- read.csv("서울시 우리마을가게 상권분석서비스(상권-소득소비).csv", sep= "\t")
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$기준_년월_코드 >= 201701)
in_cnsmp <- in_cnsmp %>% filter(in_cnsmp$상권_코드 <= 1744)
View(in_apt)
rm(list=ls());gc()
setwd("C:/Users/renz/Documents/GitHub/Private-Project/4MAT 클러스터링")
test = read.csv("test.csv", header = T)
test = na.omit(test)
names(test)
rownames(test) = test[,"이름"]
test = test[,-1]
scale.test = scale(test[,-c(6,7)])
team = test$팀
sex = test$X
dist.E = dist(scale.test)
cluster.EC = hclust(dist.E)
plot(cluster.EC, main="Euclidean, complete", cex=1)
rect.hclust(cluster.EC, k=4, border="red")
cluster.EA = hclust(dist.E, method="average")
plot(cluster.EA, main="Euclidean, average")
rect.hclust(cluster.EA, k=4, border="red")
# K-means
library(cluster)
set.seed(1)
cluster.K4 = kmeans(scale.test, centers= 4, nstart = 50)
cluster.K4$cluster
table(cluster.K4$cluster)
#--- 다차원 척도법을 이용한 군집분석 시각화(p.81)
k1 = 4
cmds = cmdscale(dist.E, k = 2)
groups = cutree(cluster.EC, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS-hclust", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS-kmeans", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=cluster.K4$cluster)
View(test)
